buildscript {
	ext {
		rootGradleDir = "${rootProject.rootDir}/gradle"
	}
}

plugins {
	id "com.github.spotbugs" version "4.7.1"
}

apply plugin:'java'
apply plugin:'groovy'
apply plugin:'idea'
apply plugin:'application'
apply plugin:'maven-publish'
apply plugin:'signing'
apply plugin: 'com.github.spotbugs'

group = "com.github.hschneid"
archivesBaseName = 'xflp'
version = '0.6.0-RELEASE'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

mainClassName = 'util.Application'


// In this section you declare the dependencies for your production and test code
dependencies {
	// Fancy collection
	implementation 'com.google.guava:guava:28.2-jre'
	implementation 'org.slf4j:slf4j-jdk-platform-logging:2.0.5'
	implementation 'org.slf4j:slf4j-simple:2.0.5'
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'org.apache.commons:commons-csv:1.10.0'
	implementation 'ch.qos.logback:logback-classic:1.2.6' // Logback
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
	implementation 'com.opencsv:opencsv:5.6'
	implementation "com.alibaba:easyexcel:3.1.0"
	implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
	testImplementation "org.spockframework:spock-core:2.3-groovy-4.0"

	spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'
	spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7'
}


// Maven - Publish
task javadocJar(type: Jar) {
	archiveClassifier.set('javadoc')
	from javadoc
}

task sourcesJar(type: Jar) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

task mainJar(type: Jar) {
	with jar
}

publishing {
	publications {
		maven(MavenPublication) {
			artifact mainJar
			artifact sourcesJar
			artifact javadocJar

			pom {
				name = 'XFLP'
				packaging 'jar'
				// optionally artifactId can be defined here
				description = 'Solver for realistic 3D container loading'
				url = 'https://github.com/hschneid/xflp'

				scm {
					connection = 'scm:git:git://github.com/hschneid/xflp.git'
					developerConnection = 'scm:git:ssh://github.com/hschneid/xflp.git'
					url = 'https://github.com/hschneid/xflp'
				}

				licenses {
					license {
						name = 'MIT License'
						url = 'http://www.opensource.org/licenses/mit-license.php'
					}
				}

				developers {
					developer {
						id = 'hschneid'
						name = 'Holger Schneider'
						email = 'holger.schneider.81@gmail.com'
					}
				}
			}

		}
	}
	def usr = "ubk"
	def passwd = "-"
	if (project.hasProperty("ossrhUsername")) {
		usr = project.getProperty("ossrhUsername")
	}
	if (project.hasProperty("ossrhPassword")) {
		passwd = project.getProperty("ossrhPassword")
	}

	repositories {
		maven {
			credentials {
				username usr
				password passwd
			}
			if (project.version.endsWith("-SNAPSHOT")) {
				url "https://oss.sonatype.org/content/repositories/snapshots/"
			} else {
				url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			}
		}
	}
}

signing {
	sign publishing.publications.maven
}

// Example to configure HTML report
spotbugs {
	ignoreFailures = true
	// showStackTraces = false
	// showProgress = true
	// effort = 'default'
	// reportLevel = 'default'
}

spotbugsMain {
	reports {
		html {
			enabled = true
			destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
			stylesheet = 'fancy-hist.xsl'
		}
	}
}

spotbugsTest {
	reports {
		html {
			enabled = true
			destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
			stylesheet = 'fancy-hist.xsl'
		}
	}
}



